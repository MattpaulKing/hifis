/* eslint-disable */
/**
 * This file was generated by 'vite-plugin-kit-routes'
 *
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

/**
 * PAGES
 */
const PAGES = {
  "/": `/`,
  "/[orgLabel]": (params: { orgLabel: (string | number) }) => {
    return `/${params['orgLabel']}`
  },
  "/[orgLabel]/clients": (params: { orgLabel: (string | number) }) => {
    return `/${params['orgLabel']}/clients`
  },
  "/[orgLabel]/clients/[action=crud]": (params: { orgLabel: (string | number), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/clients/${params['action']}`
  },
  "/[orgLabel]/clients/[clientId=uuid]": (params: { orgLabel: (string | number), clientId: (Parameters<typeof import('../params/uuid.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/clients/${params['clientId']}`
  },
  "/[orgLabel]/clients/[clientId=uuid]/services/[action=crud]": (params: { orgLabel: (string | number), clientId: (Parameters<typeof import('../params/uuid.ts').match>[0]), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/clients/${params['clientId']}/services/${params['action']}`
  },
  "/[orgLabel]/clients/[clientId=uuid]/services/events": (params: { orgLabel: (string | number), clientId: (Parameters<typeof import('../params/uuid.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/clients/${params['clientId']}/services/events`
  },
  "/[orgLabel]/custom-entities/[action=crud]": (params: { orgLabel: (string | number), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/custom-entities/${params['action']}`
  },
  "/[orgLabel]/custom-entities/v1/[action=crud]": (params: { orgLabel: (string | number), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/custom-entities/v1/${params['action']}`
  },
  "/[orgLabel]/logs": (params: { orgLabel: (string | number) }) => {
    return `/${params['orgLabel']}/logs`
  },
  "/[orgLabel]/logs/categories/[action=crud]": (params: { orgLabel: (string | number), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/logs/categories/${params['action']}`
  },
  "/[orgLabel]/services": (params: { orgLabel: (string | number) }) => {
    return `/${params['orgLabel']}/services`
  },
  "/[orgLabel]/services/[action=crud]": (params: { orgLabel: (string | number), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/services/${params['action']}`
  },
  "/[orgLabel]/services/[serviceId=uuid]": (params: { orgLabel: (string | number), serviceId: (Parameters<typeof import('../params/uuid.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/services/${params['serviceId']}`
  },
  "/[orgLabel]/services/[serviceId=uuid]/referrals": (params: { orgLabel: (string | number), serviceId: (Parameters<typeof import('../params/uuid.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/services/${params['serviceId']}/referrals`
  },
  "/[orgLabel]/services/[serviceId=uuid]/referrals/[action=crud]": (params: { orgLabel: (string | number), serviceId: (Parameters<typeof import('../params/uuid.ts').match>[0]), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/services/${params['serviceId']}/referrals/${params['action']}`
  },
  "/[orgLabel]/services/categories/create": (params: { orgLabel: (string | number) }) => {
    return `/${params['orgLabel']}/services/categories/create`
  },
  "/[orgLabel]/services/events": (params: { orgLabel: (string | number) }) => {
    return `/${params['orgLabel']}/services/events`
  },
  "/[orgLabel]/services/events/[action=crud]": (params: { orgLabel: (string | number), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/services/events/${params['action']}`
  },
  "/[orgLabel]/services/events/clients/[action=crud]": (params: { orgLabel: (string | number), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/services/events/clients/${params['action']}`
  },
  "/[orgLabel]/users/create": (params: { orgLabel: (string | number) }) => {
    return `/${params['orgLabel']}/users/create`
  }
}

/**
 * SERVERS
 */
const SERVERS = {
  "GET /api/v1/clients": `/api/v1/clients`,
  "GET /api/v1/clients/services": `/api/v1/clients/services`,
  "GET /api/v1/entities/discover": `/api/v1/entities/discover`,
  "GET /api/v1/logs/categories": `/api/v1/logs/categories`,
  "GET /api/v1/organizations": `/api/v1/organizations`,
  "GET /api/v1/search": (params?: { value?: (string) }) => {
    return `/api/v1/search${appendSp({ 'value': params?.['value'] })}`
  },
  "GET /api/v1/services": `/api/v1/services`,
  "GET /api/v1/services/categories": `/api/v1/services/categories`,
  "GET /api/v1/services/events": `/api/v1/services/events`,
  "GET /api/v1/services/events/clients": `/api/v1/services/events/clients`,
  "GET /api/v1/user/grid": `/api/v1/user/grid`,
  "GET /auth/callback": `/auth/callback`
}

/**
 * ACTIONS
 */
const ACTIONS = {
  "default /[orgLabel]/clients/[action=crud]": (params: { orgLabel: (string | number), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/clients/${params['action']}`
  },
  "default /[orgLabel]/clients/[clientId=uuid]/services/[action=crud]": (params: { orgLabel: (string | number), clientId: (Parameters<typeof import('../params/uuid.ts').match>[0]), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/clients/${params['clientId']}/services/${params['action']}`
  },
  "default /[orgLabel]/custom-entities/[action=crud]": (params: { orgLabel: (string | number), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/custom-entities/${params['action']}`
  },
  "default /[orgLabel]/custom-entities/layouts": (params: { orgLabel: (string | number) }) => {
    return `/${params['orgLabel']}/custom-entities/layouts`
  },
  "createOrUpdate /[orgLabel]/custom-entities/properties": (params: { orgLabel: (string | number) }) => {
    return `/${params['orgLabel']}/custom-entities/properties?/createOrUpdate`
  },
  "delete /[orgLabel]/custom-entities/properties": (params: { orgLabel: (string | number) }) => {
    return `/${params['orgLabel']}/custom-entities/properties?/delete`
  },
  "updateEntity /[orgLabel]/custom-entities/v1/[action=crud]": (params: { orgLabel: (string | number), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/custom-entities/v1/${params['action']}?/updateEntity`
  },
  "updateEntityField /[orgLabel]/custom-entities/v1/[action=crud]": (params: { orgLabel: (string | number), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/custom-entities/v1/${params['action']}?/updateEntityField`
  },
  "create /[orgLabel]/logs": (params: { orgLabel: (string | number) }) => {
    return `/${params['orgLabel']}/logs?/create`
  },
  "update /[orgLabel]/logs": (params: { orgLabel: (string | number) }) => {
    return `/${params['orgLabel']}/logs?/update`
  },
  "default /[orgLabel]/logs/categories/[action=crud]": (params: { orgLabel: (string | number), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/logs/categories/${params['action']}`
  },
  "default /[orgLabel]/services/[action=crud]": (params: { orgLabel: (string | number), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/services/${params['action']}`
  },
  "default /[orgLabel]/services/[serviceId=uuid]/referrals/[action=crud]": (params: { orgLabel: (string | number), serviceId: (Parameters<typeof import('../params/uuid.ts').match>[0]), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/services/${params['serviceId']}/referrals/${params['action']}`
  },
  "create /[orgLabel]/services/categories/create": (params: { orgLabel: (string | number) }) => {
    return `/${params['orgLabel']}/services/categories/create?/create`
  },
  "default /[orgLabel]/services/events/[action=crud]": (params: { orgLabel: (string | number), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/services/events/${params['action']}`
  },
  "default /[orgLabel]/services/events/clients/[action=crud]": (params: { orgLabel: (string | number), action: (Parameters<typeof import('../params/crud.ts').match>[0]) }) => {
    return `/${params['orgLabel']}/services/events/clients/${params['action']}`
  },
  "create /[orgLabel]/users/create": (params: { orgLabel: (string | number) }) => {
    return `/${params['orgLabel']}/users/create?/create`
  }
}

/**
 * LINKS
 */
const LINKS = {
  
}

type ParamValue = string | number | undefined

/**
 * Append search params to a string
 */
export const appendSp = (
  sp?: Record<string, ParamValue | ParamValue[]>,
  prefix: '?' | '&' = '?',
) => {
  if (sp === undefined) return ''

  const params = new URLSearchParams()
  const append = (n: string, v: ParamValue) => {
    if (v !== undefined) {
      params.append(n, String(v))
    }
  }

  let anchor = ''
  for (const [name, val] of Object.entries(sp)) {
    if (name === '__KIT_ROUTES_ANCHOR__' && val !== undefined) {
      anchor = `#${val}`
      continue
    }
    if (Array.isArray(val)) {
      for (const v of val) {
        append(name, v)
      }
    } else {
      append(name, val)
    }
  }

  const formatted = params.toString()
  if (formatted || anchor) {
    return `${prefix}${formatted}${anchor}`.replace('?#', '#')
  }
  return ''
}

/**
 * get the current search params
 * 
 * Could be use like this:
 * ```
 * route("/cities", { page: 2 }, { ...currentSP() })
 * ```
 */ 
export const currentSp = () => {
  const params = new URLSearchParams(window.location.search)
  const record: Record<string, string> = {}
  for (const [key, value] of params.entries()) {
    record[key] = value
  }
  return record
}

// route function helpers
type NonFunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T]
type FunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]
type FunctionParams<T> = T extends (...args: infer P) => any ? P : never

const AllObjs = { ...PAGES, ...ACTIONS, ...SERVERS, ...LINKS }
type AllTypes = typeof AllObjs

export type Routes = keyof AllTypes extends `${string}/${infer Route}` ? `/${Route}` : keyof AllTypes
export const routes = [
	...new Set(Object.keys(AllObjs).map((route) => /^\/.*|[^ ]?\/.*$/.exec(route)?.[0] ?? route)),
] as Routes[]

/**
 * To be used like this: 
 * ```ts
 * import { route } from './ROUTES'
 * 
 * route('site_id', { id: 1 })
 * ```
 */
export function route<T extends FunctionKeys<AllTypes>>(key: T, ...params: FunctionParams<AllTypes[T]>): string
export function route<T extends NonFunctionKeys<AllTypes>>(key: T): string
export function route<T extends keyof AllTypes>(key: T, ...params: any[]): string {
  if (AllObjs[key] as any instanceof Function) {
    const element = (AllObjs as any)[key] as (...args: any[]) => string
    return element(...params)
  } else {
    return AllObjs[key] as string
  }
}

/**
* Add this type as a generic of the vite plugin `kitRoutes<KIT_ROUTES>`.
*
* Full example:
* ```ts
* import type { KIT_ROUTES } from '$lib/ROUTES'
* import { kitRoutes } from 'vite-plugin-kit-routes'
*
* kitRoutes<KIT_ROUTES>({
*  PAGES: {
*    // here, key of object will be typed!
*  }
* })
* ```
*/
export type KIT_ROUTES = {
  PAGES: { '/': never, '/[orgLabel]': 'orgLabel', '/[orgLabel]/clients': 'orgLabel', '/[orgLabel]/clients/[action=crud]': 'orgLabel' | 'action', '/[orgLabel]/clients/[clientId=uuid]': 'orgLabel' | 'clientId', '/[orgLabel]/clients/[clientId=uuid]/services/[action=crud]': 'orgLabel' | 'clientId' | 'action', '/[orgLabel]/clients/[clientId=uuid]/services/events': 'orgLabel' | 'clientId', '/[orgLabel]/custom-entities/[action=crud]': 'orgLabel' | 'action', '/[orgLabel]/custom-entities/v1/[action=crud]': 'orgLabel' | 'action', '/[orgLabel]/logs': 'orgLabel', '/[orgLabel]/logs/categories/[action=crud]': 'orgLabel' | 'action', '/[orgLabel]/services': 'orgLabel', '/[orgLabel]/services/[action=crud]': 'orgLabel' | 'action', '/[orgLabel]/services/[serviceId=uuid]': 'orgLabel' | 'serviceId', '/[orgLabel]/services/[serviceId=uuid]/referrals': 'orgLabel' | 'serviceId', '/[orgLabel]/services/[serviceId=uuid]/referrals/[action=crud]': 'orgLabel' | 'serviceId' | 'action', '/[orgLabel]/services/categories/create': 'orgLabel', '/[orgLabel]/services/events': 'orgLabel', '/[orgLabel]/services/events/[action=crud]': 'orgLabel' | 'action', '/[orgLabel]/services/events/clients/[action=crud]': 'orgLabel' | 'action', '/[orgLabel]/users/create': 'orgLabel' }
  SERVERS: { 'GET /api/v1/clients': never, 'GET /api/v1/clients/services': never, 'GET /api/v1/entities/discover': never, 'GET /api/v1/logs/categories': never, 'GET /api/v1/organizations': never, 'GET /api/v1/search': never, 'GET /api/v1/services': never, 'GET /api/v1/services/categories': never, 'GET /api/v1/services/events': never, 'GET /api/v1/services/events/clients': never, 'GET /api/v1/user/grid': never, 'GET /auth/callback': never }
  ACTIONS: { 'default /[orgLabel]/clients/[action=crud]': 'orgLabel' | 'action', 'default /[orgLabel]/clients/[clientId=uuid]/services/[action=crud]': 'orgLabel' | 'clientId' | 'action', 'default /[orgLabel]/custom-entities/[action=crud]': 'orgLabel' | 'action', 'default /[orgLabel]/custom-entities/layouts': 'orgLabel', 'createOrUpdate /[orgLabel]/custom-entities/properties': 'orgLabel', 'delete /[orgLabel]/custom-entities/properties': 'orgLabel', 'updateEntity /[orgLabel]/custom-entities/v1/[action=crud]': 'orgLabel' | 'action', 'updateEntityField /[orgLabel]/custom-entities/v1/[action=crud]': 'orgLabel' | 'action', 'create /[orgLabel]/logs': 'orgLabel', 'update /[orgLabel]/logs': 'orgLabel', 'default /[orgLabel]/logs/categories/[action=crud]': 'orgLabel' | 'action', 'default /[orgLabel]/services/[action=crud]': 'orgLabel' | 'action', 'default /[orgLabel]/services/[serviceId=uuid]/referrals/[action=crud]': 'orgLabel' | 'serviceId' | 'action', 'create /[orgLabel]/services/categories/create': 'orgLabel', 'default /[orgLabel]/services/events/[action=crud]': 'orgLabel' | 'action', 'default /[orgLabel]/services/events/clients/[action=crud]': 'orgLabel' | 'action', 'create /[orgLabel]/users/create': 'orgLabel' }
  LINKS: Record<string, never>
  Params: { 'orgLabel': never, 'action': never, 'clientId': never, 'serviceId': never, 'value': never }
}
